// <auto-generated />
using System;
using A1_Manager.ApplicationDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace A1_Manager.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20201027203916_InitCommit")]
    partial class InitCommit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("A1_Manager.Models.Models_Main.EmployeePresence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClockInTimeId")
                        .HasColumnType("int");

                    b.Property<int>("ClockOutTimeId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClockInTimeId");

                    b.HasIndex("ClockOutTimeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeePresence");
                });

            modelBuilder.Entity("A1_Manager.Models_Joins.BranchSupplier", b =>
                {
                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.HasKey("BranchId", "SupplierId");

                    b.HasIndex("ContractId");

                    b.HasIndex("SupplierId");

                    b.ToTable("BranchSuppliers");
                });

            modelBuilder.Entity("A1_Manager.Models_Joins.EmployeeRole", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId", "RoleId");

                    b.ToTable("EmployeeRoles");
                });

            modelBuilder.Entity("A1_Manager.Models_Joins.ProductOrder", b =>
                {
                    b.Property<int>("BranchProductId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("BranchProductId", "OrderId");

                    b.ToTable("ProductOrders");
                });

            modelBuilder.Entity("A1_Manager.Models_Main.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("DateAddedId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NameId")
                        .HasColumnType("int");

                    b.Property<int>("OccupancyCostId")
                        .HasColumnType("int");

                    b.Property<int>("PreferredCurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DateAddedId");

                    b.HasIndex("NameId");

                    b.HasIndex("OccupancyCostId");

                    b.HasIndex("PreferredCurrencyId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("A1_Manager.Models_Main.BranchProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CostId")
                        .HasColumnType("int");

                    b.Property<int>("DateAddedId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("RetailPriceId")
                        .HasColumnType("int");

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int>("TaxPercentage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CostId");

                    b.HasIndex("DateAddedId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RetailPriceId");

                    b.HasIndex("StockId");

                    b.HasIndex("SupplierId");

                    b.ToTable("BranchProduct");
                });

            modelBuilder.Entity("A1_Manager.Models_Main.BranchSale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("DateId")
                        .HasColumnType("int");

                    b.Property<int?>("ExpensesId")
                        .HasColumnType("int");

                    b.Property<int?>("ProfitId")
                        .HasColumnType("int");

                    b.Property<int?>("RevenueId")
                        .HasColumnType("int");

                    b.Property<int>("TaxId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("DateId");

                    b.HasIndex("ExpensesId");

                    b.HasIndex("ProfitId");

                    b.HasIndex("RevenueId");

                    b.HasIndex("TaxId");

                    b.ToTable("BranchSales");
                });

            modelBuilder.Entity("A1_Manager.Models_Main.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DateAddedId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PreferredCurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DateAddedId");

                    b.HasIndex("PreferredCurrencyId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("A1_Manager.Models_Main.BrandSale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("DateId")
                        .HasColumnType("int");

                    b.Property<int?>("ExpensesId")
                        .HasColumnType("int");

                    b.Property<int?>("ProfitId")
                        .HasColumnType("int");

                    b.Property<int?>("RevenueId")
                        .HasColumnType("int");

                    b.Property<int>("TaxId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("DateId");

                    b.HasIndex("ExpensesId");

                    b.HasIndex("ProfitId");

                    b.HasIndex("RevenueId");

                    b.HasIndex("TaxId");

                    b.ToTable("BrandSales");
                });

            modelBuilder.Entity("A1_Manager.Models_Main.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int?>("ContractId")
                        .HasColumnType("int");

                    b.Property<int>("FirstNameId")
                        .HasColumnType("int");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LastNameId")
                        .HasColumnType("int");

                    b.Property<int>("LeaveRemaining")
                        .HasColumnType("int");

                    b.Property<int>("SalaryId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("ContractId");

                    b.HasIndex("FirstNameId");

                    b.HasIndex("LastNameId");

                    b.HasIndex("SalaryId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("A1_Manager.Models_Main.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryDateId")
                        .HasColumnType("int");

                    b.Property<int>("MoneyPerAmountId")
                        .HasColumnType("int");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<int>("OrderedDateId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("DeliveryDateId");

                    b.HasIndex("MoneyPerAmountId");

                    b.HasIndex("OrderedDateId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("A1_Manager.Models_Main.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BarCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BarCodeImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("DateAddedId")
                        .HasColumnType("int");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("DateAddedId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("A1_Manager.Models_Main.ProductSale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchProductId")
                        .HasColumnType("int");

                    b.Property<int>("DateId")
                        .HasColumnType("int");

                    b.Property<int?>("ExpensesId")
                        .HasColumnType("int");

                    b.Property<int?>("ProfitId")
                        .HasColumnType("int");

                    b.Property<int?>("RevenueId")
                        .HasColumnType("int");

                    b.Property<int>("TaxId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchProductId");

                    b.HasIndex("DateId");

                    b.HasIndex("ExpensesId");

                    b.HasIndex("ProfitId");

                    b.HasIndex("RevenueId");

                    b.HasIndex("TaxId");

                    b.ToTable("ProductSales");
                });

            modelBuilder.Entity("A1_Manager.Models_Main.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NameId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("NameId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("A1_Manager.Models_Main.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("DateAddedId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdentityId")
                        .HasColumnType("int");

                    b.Property<int>("NameId")
                        .HasColumnType("int");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DateAddedId");

                    b.HasIndex("IdentityId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("A1_Manager.Models_Support.Amount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Volume")
                        .HasColumnType("real");

                    b.Property<string>("VolumeType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Amount");
                });

            modelBuilder.Entity("A1_Manager.Models_Support.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("A1_Manager.Models_Support.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExpirationDateId")
                        .HasColumnType("int");

                    b.Property<string>("PdfURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SignedDateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExpirationDateId");

                    b.HasIndex("SignedDateId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("A1_Manager.Models_Support.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("A1_Manager.Models_Support.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("A1_Manager.Models_Support.Date", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Dates");
                });

            modelBuilder.Entity("A1_Manager.Models_Support.Identity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Identities");
                });

            modelBuilder.Entity("A1_Manager.Models_Support.Money", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Money");
                });

            modelBuilder.Entity("A1_Manager.Models_Support.MoneyPerAmount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmountId")
                        .HasColumnType("int");

                    b.Property<int>("MoneyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AmountId");

                    b.HasIndex("MoneyId");

                    b.ToTable("MoneyPerAmount");
                });

            modelBuilder.Entity("A1_Manager.Models.Models_Main.EmployeePresence", b =>
                {
                    b.HasOne("A1_Manager.Models_Support.Date", "ClockInTime")
                        .WithMany()
                        .HasForeignKey("ClockInTimeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models_Support.Date", "ClockOutTime")
                        .WithMany()
                        .HasForeignKey("ClockOutTimeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models_Main.Employee", "Employee")
                        .WithMany("Presence")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("A1_Manager.Models_Joins.BranchSupplier", b =>
                {
                    b.HasOne("A1_Manager.Models_Main.Branch", "Branch")
                        .WithMany("Suppliers")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models_Support.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models_Main.Supplier", "Supplier")
                        .WithMany("Branches")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A1_Manager.Models_Joins.EmployeeRole", b =>
                {
                    b.HasOne("A1_Manager.Models_Main.Employee", "Employee")
                        .WithMany("Roles")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models_Main.Role", "Role")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();
                });

            modelBuilder.Entity("A1_Manager.Models_Joins.ProductOrder", b =>
                {
                    b.HasOne("A1_Manager.Models_Main.BranchProduct", "BranchProduct")
                        .WithMany("Orders")
                        .HasForeignKey("BranchProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models_Main.Order", "Order")
                        .WithMany("Products")
                        .HasForeignKey("BranchProductId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();
                });

            modelBuilder.Entity("A1_Manager.Models_Main.Branch", b =>
                {
                    b.HasOne("A1_Manager.Models_Main.Brand", "Brand")
                        .WithMany("Branches")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models_Support.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models_Support.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models_Support.Date", "DateAdded")
                        .WithMany()
                        .HasForeignKey("DateAddedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models_Support.Identity", "Name")
                        .WithMany()
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models_Support.Money", "OccupancyCost")
                        .WithMany()
                        .HasForeignKey("OccupancyCostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models_Support.Currency", "PreferredCurrency")
                        .WithMany()
                        .HasForeignKey("PreferredCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A1_Manager.Models_Main.BranchProduct", b =>
                {
                    b.HasOne("A1_Manager.Models_Main.Branch", "Branch")
                        .WithMany("Products")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models_Support.Money", "Cost")
                        .WithMany()
                        .HasForeignKey("CostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models_Support.Date", "DateAdded")
                        .WithMany()
                        .HasForeignKey("DateAddedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models_Main.Product", "Product")
                        .WithMany("Branches")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models_Support.MoneyPerAmount", "RetailPrice")
                        .WithMany()
                        .HasForeignKey("RetailPriceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models_Support.Amount", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models_Main.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A1_Manager.Models_Main.BranchSale", b =>
                {
                    b.HasOne("A1_Manager.Models_Main.Branch", "Branch")
                        .WithMany("Sales")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models_Support.Date", "Date")
                        .WithMany()
                        .HasForeignKey("DateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models_Support.Money", "Expenses")
                        .WithMany()
                        .HasForeignKey("ExpensesId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("A1_Manager.Models_Support.Money", "Profit")
                        .WithMany()
                        .HasForeignKey("ProfitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("A1_Manager.Models_Support.Money", "Revenue")
                        .WithMany()
                        .HasForeignKey("RevenueId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("A1_Manager.Models_Support.Money", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A1_Manager.Models_Main.Brand", b =>
                {
                    b.HasOne("A1_Manager.Models_Support.Date", "DateAdded")
                        .WithMany()
                        .HasForeignKey("DateAddedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models_Support.Currency", "PreferredCurrency")
                        .WithMany()
                        .HasForeignKey("PreferredCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A1_Manager.Models_Main.BrandSale", b =>
                {
                    b.HasOne("A1_Manager.Models_Main.Brand", "Brand")
                        .WithMany("BrandSales")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models_Support.Date", "Date")
                        .WithMany()
                        .HasForeignKey("DateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models_Support.Money", "Expenses")
                        .WithMany()
                        .HasForeignKey("ExpensesId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("A1_Manager.Models_Support.Money", "Profit")
                        .WithMany()
                        .HasForeignKey("ProfitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("A1_Manager.Models_Support.Money", "Revenue")
                        .WithMany()
                        .HasForeignKey("RevenueId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("A1_Manager.Models_Support.Money", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A1_Manager.Models_Main.Employee", b =>
                {
                    b.HasOne("A1_Manager.Models_Main.Branch", "Branch")
                        .WithMany("Employees")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models_Support.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId");

                    b.HasOne("A1_Manager.Models_Support.Identity", "FirstName")
                        .WithMany()
                        .HasForeignKey("FirstNameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models_Support.Identity", "LastName")
                        .WithMany()
                        .HasForeignKey("LastNameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models_Support.Money", "Salary")
                        .WithMany()
                        .HasForeignKey("SalaryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A1_Manager.Models_Main.Order", b =>
                {
                    b.HasOne("A1_Manager.Models_Main.Branch", "Branch")
                        .WithMany("Orders")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models_Support.Date", "DeliveryDate")
                        .WithMany()
                        .HasForeignKey("DeliveryDateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models_Support.MoneyPerAmount", "MoneyPerAmount")
                        .WithMany()
                        .HasForeignKey("MoneyPerAmountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models_Support.Date", "OrderedDate")
                        .WithMany()
                        .HasForeignKey("OrderedDateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models_Main.Supplier", "Supplier")
                        .WithMany("Orders")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("A1_Manager.Models_Main.Product", b =>
                {
                    b.HasOne("A1_Manager.Models_Main.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models_Support.Date", "DateAdded")
                        .WithMany()
                        .HasForeignKey("DateAddedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A1_Manager.Models_Main.ProductSale", b =>
                {
                    b.HasOne("A1_Manager.Models_Main.BranchProduct", "BranchProduct")
                        .WithMany("Sales")
                        .HasForeignKey("BranchProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models_Support.Date", "Date")
                        .WithMany()
                        .HasForeignKey("DateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models_Support.Money", "Expenses")
                        .WithMany()
                        .HasForeignKey("ExpensesId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("A1_Manager.Models_Support.Money", "Profit")
                        .WithMany()
                        .HasForeignKey("ProfitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("A1_Manager.Models_Support.Money", "Revenue")
                        .WithMany()
                        .HasForeignKey("RevenueId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("A1_Manager.Models_Support.Money", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A1_Manager.Models_Main.Role", b =>
                {
                    b.HasOne("A1_Manager.Models_Main.Brand", "Brand")
                        .WithMany("Roles")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models_Support.Identity", "Name")
                        .WithMany()
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A1_Manager.Models_Main.Supplier", b =>
                {
                    b.HasOne("A1_Manager.Models_Support.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models_Support.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models_Support.Date", "DateAdded")
                        .WithMany()
                        .HasForeignKey("DateAddedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models_Support.Identity", "Name")
                        .WithMany()
                        .HasForeignKey("IdentityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("A1_Manager.Models_Support.Contract", b =>
                {
                    b.HasOne("A1_Manager.Models_Support.Date", "ExpirationDate")
                        .WithMany()
                        .HasForeignKey("ExpirationDateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models_Support.Date", "SignedDate")
                        .WithMany()
                        .HasForeignKey("SignedDateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A1_Manager.Models_Support.Money", b =>
                {
                    b.HasOne("A1_Manager.Models_Support.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A1_Manager.Models_Support.MoneyPerAmount", b =>
                {
                    b.HasOne("A1_Manager.Models_Support.Amount", "Amount")
                        .WithMany()
                        .HasForeignKey("AmountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models_Support.Money", "Money")
                        .WithMany()
                        .HasForeignKey("MoneyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
