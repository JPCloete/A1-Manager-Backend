// <auto-generated />
using System;
using A1_Manager.ApplicationDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace A1_Manager.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20201019212925_FluentApiTest")]
    partial class FluentApiTest
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("A1_Manager.JoinModels.BranchProduct", b =>
                {
                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("CostId")
                        .HasColumnType("int");

                    b.Property<int>("RetailPriceId")
                        .HasColumnType("int");

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.HasKey("BranchId", "ProductId");

                    b.HasIndex("CostId")
                        .IsUnique();

                    b.HasIndex("ProductId");

                    b.HasIndex("RetailPriceId")
                        .IsUnique();

                    b.HasIndex("StockId")
                        .IsUnique();

                    b.ToTable("BranchProducts");
                });

            modelBuilder.Entity("A1_Manager.JoinModels.BranchSupplier", b =>
                {
                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("BranchId", "SupplierId");

                    b.HasIndex("SupplierId");

                    b.ToTable("BranchSuppliers");
                });

            modelBuilder.Entity("A1_Manager.JoinModels.EmployeeRole", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId", "RoleId");

                    b.ToTable("EmployeeRoles");
                });

            modelBuilder.Entity("A1_Manager.JoinModels.ProductOrder", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("ProductOrders");
                });

            modelBuilder.Entity("A1_Manager.Models.Amount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Volume")
                        .HasColumnType("int");

                    b.Property<int>("VolumeType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Amount");
                });

            modelBuilder.Entity("A1_Manager.Models.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId")
                        .IsUnique();

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("A1_Manager.Models.BranchSale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("DateId")
                        .HasColumnType("int");

                    b.Property<int?>("ExpensesId")
                        .HasColumnType("int");

                    b.Property<int?>("ProfitId")
                        .HasColumnType("int");

                    b.Property<int?>("RevenueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("DateId")
                        .IsUnique();

                    b.HasIndex("ExpensesId")
                        .IsUnique()
                        .HasFilter("[ExpensesId] IS NOT NULL");

                    b.HasIndex("ProfitId")
                        .IsUnique()
                        .HasFilter("[ProfitId] IS NOT NULL");

                    b.HasIndex("RevenueId")
                        .IsUnique()
                        .HasFilter("[RevenueId] IS NOT NULL");

                    b.ToTable("BranchSales");
                });

            modelBuilder.Entity("A1_Manager.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DateAddedId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DateAddedId")
                        .IsUnique();

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("A1_Manager.Models.BrandSale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("DateId")
                        .HasColumnType("int");

                    b.Property<int?>("ExpensesId")
                        .HasColumnType("int");

                    b.Property<int?>("ProfitId")
                        .HasColumnType("int");

                    b.Property<int?>("RevenueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("DateId")
                        .IsUnique();

                    b.HasIndex("ExpensesId")
                        .IsUnique()
                        .HasFilter("[ExpensesId] IS NOT NULL");

                    b.HasIndex("ProfitId")
                        .IsUnique()
                        .HasFilter("[ProfitId] IS NOT NULL");

                    b.HasIndex("RevenueId")
                        .IsUnique()
                        .HasFilter("[RevenueId] IS NOT NULL");

                    b.ToTable("BrandSales");
                });

            modelBuilder.Entity("A1_Manager.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("A1_Manager.Models.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContractPdfURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("ExpirationDateId")
                        .HasColumnType("int");

                    b.Property<int>("SignedDateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExpirationDateId")
                        .IsUnique();

                    b.HasIndex("SignedDateId")
                        .IsUnique();

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("A1_Manager.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("A1_Manager.Models.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("A1_Manager.Models.Date", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Dates");
                });

            modelBuilder.Entity("A1_Manager.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<int>("FirstNameId")
                        .HasColumnType("int");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LastNameId")
                        .HasColumnType("int");

                    b.Property<int>("LeaveRemaining")
                        .HasColumnType("int");

                    b.Property<int>("Presence")
                        .HasColumnType("int");

                    b.Property<int>("SalaryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("ContractId")
                        .IsUnique();

                    b.HasIndex("FirstNameId")
                        .IsUnique();

                    b.HasIndex("LastNameId")
                        .IsUnique();

                    b.HasIndex("SalaryId")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("A1_Manager.Models.Identity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Identities");
                });

            modelBuilder.Entity("A1_Manager.Models.Money", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Money");
                });

            modelBuilder.Entity("A1_Manager.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmountId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CostId")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryDateId")
                        .HasColumnType("int");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<int>("OrderedDateId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AmountId")
                        .IsUnique();

                    b.HasIndex("BranchId");

                    b.HasIndex("CostId")
                        .IsUnique();

                    b.HasIndex("DeliveryDateId")
                        .IsUnique();

                    b.HasIndex("OrderedDateId")
                        .IsUnique();

                    b.HasIndex("SupplierId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("A1_Manager.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BarCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BarCodeImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("A1_Manager.Models.ProductSale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("DateId")
                        .HasColumnType("int");

                    b.Property<int?>("ExpensesId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProfitId")
                        .HasColumnType("int");

                    b.Property<int?>("RevenueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId")
                        .IsUnique();

                    b.HasIndex("DateId")
                        .IsUnique();

                    b.HasIndex("ExpensesId")
                        .IsUnique()
                        .HasFilter("[ExpensesId] IS NOT NULL");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.HasIndex("ProfitId")
                        .IsUnique()
                        .HasFilter("[ProfitId] IS NOT NULL");

                    b.HasIndex("RevenueId")
                        .IsUnique()
                        .HasFilter("[RevenueId] IS NOT NULL");

                    b.ToTable("ProductSales");
                });

            modelBuilder.Entity("A1_Manager.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NameId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("NameId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("A1_Manager.Models.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdentityId")
                        .HasColumnType("int");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId")
                        .IsUnique();

                    b.HasIndex("CountryId")
                        .IsUnique();

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("A1_Manager.JoinModels.BranchProduct", b =>
                {
                    b.HasOne("A1_Manager.Models.Branch", "Branch")
                        .WithMany("Products")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models.Money", "Cost")
                        .WithOne()
                        .HasForeignKey("A1_Manager.JoinModels.BranchProduct", "CostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models.Product", "Product")
                        .WithMany("Branches")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models.Money", "RetailPrice")
                        .WithOne()
                        .HasForeignKey("A1_Manager.JoinModels.BranchProduct", "RetailPriceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models.Amount", "Stock")
                        .WithOne()
                        .HasForeignKey("A1_Manager.JoinModels.BranchProduct", "StockId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A1_Manager.JoinModels.BranchSupplier", b =>
                {
                    b.HasOne("A1_Manager.Models.Branch", "Branch")
                        .WithMany("Suppliers")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models.Supplier", "Supplier")
                        .WithMany("Branches")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A1_Manager.JoinModels.EmployeeRole", b =>
                {
                    b.HasOne("A1_Manager.Models.Employee", "Employee")
                        .WithMany("Roles")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models.Role", "Role")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A1_Manager.JoinModels.ProductOrder", b =>
                {
                    b.HasOne("A1_Manager.Models.Product", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models.Order", "Order")
                        .WithMany("Products")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A1_Manager.Models.Branch", b =>
                {
                    b.HasOne("A1_Manager.Models.Brand", "Brand")
                        .WithMany("Branches")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models.Country", "Country")
                        .WithOne()
                        .HasForeignKey("A1_Manager.Models.Branch", "CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A1_Manager.Models.BranchSale", b =>
                {
                    b.HasOne("A1_Manager.Models.Branch", "Branch")
                        .WithMany("Sales")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models.Date", "Date")
                        .WithOne()
                        .HasForeignKey("A1_Manager.Models.BranchSale", "DateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models.Money", "Expenses")
                        .WithOne()
                        .HasForeignKey("A1_Manager.Models.BranchSale", "ExpensesId");

                    b.HasOne("A1_Manager.Models.Money", "Profit")
                        .WithOne()
                        .HasForeignKey("A1_Manager.Models.BranchSale", "ProfitId");

                    b.HasOne("A1_Manager.Models.Money", "Revenue")
                        .WithOne()
                        .HasForeignKey("A1_Manager.Models.BranchSale", "RevenueId");
                });

            modelBuilder.Entity("A1_Manager.Models.Brand", b =>
                {
                    b.HasOne("A1_Manager.Models.Date", "DateAdded")
                        .WithOne()
                        .HasForeignKey("A1_Manager.Models.Brand", "DateAddedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A1_Manager.Models.BrandSale", b =>
                {
                    b.HasOne("A1_Manager.Models.Brand", "Brand")
                        .WithMany("BrandSales")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models.Date", "Date")
                        .WithOne()
                        .HasForeignKey("A1_Manager.Models.BrandSale", "DateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models.Money", "Expenses")
                        .WithOne()
                        .HasForeignKey("A1_Manager.Models.BrandSale", "ExpensesId");

                    b.HasOne("A1_Manager.Models.Money", "Profit")
                        .WithOne()
                        .HasForeignKey("A1_Manager.Models.BrandSale", "ProfitId");

                    b.HasOne("A1_Manager.Models.Money", "Revenue")
                        .WithOne()
                        .HasForeignKey("A1_Manager.Models.BrandSale", "RevenueId");
                });

            modelBuilder.Entity("A1_Manager.Models.Contract", b =>
                {
                    b.HasOne("A1_Manager.Models.Date", "ExpirationDate")
                        .WithOne()
                        .HasForeignKey("A1_Manager.Models.Contract", "ExpirationDateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models.Date", "SignedDate")
                        .WithOne()
                        .HasForeignKey("A1_Manager.Models.Contract", "SignedDateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A1_Manager.Models.Employee", b =>
                {
                    b.HasOne("A1_Manager.Models.Branch", "Branch")
                        .WithMany("Employees")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models.Contract", "Contract")
                        .WithOne("Employee")
                        .HasForeignKey("A1_Manager.Models.Employee", "ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models.Identity", "FirstName")
                        .WithOne()
                        .HasForeignKey("A1_Manager.Models.Employee", "FirstNameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models.Identity", "LastName")
                        .WithOne()
                        .HasForeignKey("A1_Manager.Models.Employee", "LastNameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models.Money", "Salary")
                        .WithOne()
                        .HasForeignKey("A1_Manager.Models.Employee", "SalaryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A1_Manager.Models.Money", b =>
                {
                    b.HasOne("A1_Manager.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A1_Manager.Models.Order", b =>
                {
                    b.HasOne("A1_Manager.Models.Amount", "Amount")
                        .WithOne()
                        .HasForeignKey("A1_Manager.Models.Order", "AmountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models.Branch", "Branch")
                        .WithMany("Orders")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models.Money", "Cost")
                        .WithOne()
                        .HasForeignKey("A1_Manager.Models.Order", "CostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models.Date", "DeliveryDate")
                        .WithOne()
                        .HasForeignKey("A1_Manager.Models.Order", "DeliveryDateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models.Date", "OrderedDate")
                        .WithOne()
                        .HasForeignKey("A1_Manager.Models.Order", "OrderedDateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models.Supplier", "Supplier")
                        .WithMany("Orders")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A1_Manager.Models.Product", b =>
                {
                    b.HasOne("A1_Manager.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A1_Manager.Models.ProductSale", b =>
                {
                    b.HasOne("A1_Manager.Models.Branch", "Branch")
                        .WithOne()
                        .HasForeignKey("A1_Manager.Models.ProductSale", "BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models.Date", "Date")
                        .WithOne()
                        .HasForeignKey("A1_Manager.Models.ProductSale", "DateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models.Money", "Expenses")
                        .WithOne()
                        .HasForeignKey("A1_Manager.Models.ProductSale", "ExpensesId");

                    b.HasOne("A1_Manager.Models.Product", "Product")
                        .WithOne()
                        .HasForeignKey("A1_Manager.Models.ProductSale", "ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models.Money", "Profit")
                        .WithOne()
                        .HasForeignKey("A1_Manager.Models.ProductSale", "ProfitId");

                    b.HasOne("A1_Manager.Models.Money", "Revenue")
                        .WithOne()
                        .HasForeignKey("A1_Manager.Models.ProductSale", "RevenueId");
                });

            modelBuilder.Entity("A1_Manager.Models.Role", b =>
                {
                    b.HasOne("A1_Manager.Models.Brand", "Brand")
                        .WithMany("Roles")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models.Identity", "Name")
                        .WithMany()
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A1_Manager.Models.Supplier", b =>
                {
                    b.HasOne("A1_Manager.Models.City", "City")
                        .WithOne()
                        .HasForeignKey("A1_Manager.Models.Supplier", "CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A1_Manager.Models.Country", "Country")
                        .WithOne()
                        .HasForeignKey("A1_Manager.Models.Supplier", "CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
